syntax = "proto3";

import "nanopb.proto";

message LayerPropsMessage {
   uint32 height = 1 [(nanopb).int_size = IS_8];
   int32 left = 2 [(nanopb).int_size = IS_16];
   int32 top = 3 [(nanopb).int_size = IS_16];
   uint32 width = 4 [(nanopb).int_size = IS_8];
   // Flags for diffing what changed
   bool heightChanged = 5;
   bool leftChanged = 6;
   bool topChanged = 7;
   bool widthChanged = 8;
}

message TextLayerPropsMessage {
   string alignment = 1 [(nanopb).type = FT_POINTER];
   uint32 color = 2;
   string text = 3 [(nanopb).type = FT_POINTER];
   LayerPropsMessage layerProps = 4 [(nanopb).type = FT_POINTER];
   // Flags for diffing what changed
   bool alignmentChanged = 5;
   bool colorChanged = 6;
   bool textChanged = 7;
   bool layerPropsChanged = 8;
}

message ArcLayerPropsMessage {
   int32 endAngle = 1 [(nanopb).int_size = IS_16];
   int32 startAngle = 2 [(nanopb).int_size = IS_16];
   PointMessage center = 3;
   uint32 color = 4;
   uint32 radius = 5 [(nanopb).int_size = IS_8];
   uint32 strokeColor = 6;
   uint32 strokeWidth = 7 [(nanopb).int_size = IS_8];
   uint32 thickness = 8 [(nanopb).int_size = IS_8];
   // Flags for diffing what changed
   bool centerChanged = 9;
   bool colorChanged = 10;
   bool endAngleChanged = 11;
   bool radiusChanged = 12;
   bool startAngleChanged = 13;
   bool strokeColorChanged = 14;
   bool strokeWidthChanged = 15;
   bool thicknessChanged = 16;
}

message PointMessage {
   int32 x = 1 [(nanopb).int_size = IS_16];
   int32 y = 2 [(nanopb).int_size = IS_16];
   // Flags for diffing what changed
   bool xChanged = 3;
   bool yChanged = 4;
}

message PathLayerPropsMessage {
   int32 rotationAngle = 1 [(nanopb).int_size = IS_16];
   PointMessage rotationPoint = 2;
   repeated PointMessage points = 3 [(nanopb).type = FT_POINTER];
   uint32 fillColor = 4;
   uint32 strokeColor = 5;
   // Flags for diffing what changed
   bool fillColorChanged = 6;
   bool pointsChanged = 7;
   bool rotationAngleChanged = 8;
   bool rotationPointChanged = 9;
   bool strokeColorChanged = 10;
}

message CircleLayerPropsMessage {
   uint32 radius = 1 [(nanopb).int_size = IS_8];
   LayerPropsMessage layerProps = 2 [(nanopb).type = FT_POINTER];
   // Flags for diffing what changed
   bool radiusChanged = 3;
   bool layerPropsChanged = 4;
}

message AnimationPropsMessage {
   bool loop = 1;
   bool sequence = 2;
   repeated OperationMessage endOperations = 3 [(nanopb).type = FT_POINTER];
   repeated OperationMessage startOperations = 4 [(nanopb).type = FT_POINTER];
   uint32 delay = 5 [(nanopb).int_size = IS_16];
   uint32 duration = 6 [(nanopb).int_size = IS_16];
   // Flags for diffing what changed
   bool durationChanged = 7;
   bool delayChanged = 8;
   bool loopChanged = 9;
   bool sequenceChanged = 10;
}

message OperationMessage {
   uint32 operation = 1 [(nanopb).int_size = IS_8];
   uint32 nodeType = 2 [(nanopb).int_size = IS_8];
   string nodeId = 3 [(nanopb).type = FT_POINTER];
   string parentNodeId = 4 [(nanopb).type = FT_POINTER];
   TextLayerPropsMessage textLayerProps = 5 [(nanopb).type = FT_POINTER];
   AnimationPropsMessage animationProps = 6 [(nanopb).type = FT_POINTER];
   LayerPropsMessage layerProps = 7 [(nanopb).type = FT_POINTER];
   CircleLayerPropsMessage circleLayerProps = 8 [(nanopb).type = FT_POINTER];
   ArcLayerPropsMessage arcLayerProps = 9 [(nanopb).type = FT_POINTER];
   PathLayerPropsMessage pathLayerProps = 10 [(nanopb).type = FT_POINTER];
}

message BatchOperationsMessage {
   repeated OperationMessage operations = 1 [(nanopb).type = FT_POINTER];
}